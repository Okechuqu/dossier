import type { Metadata } from "next";
import "./globals.css";
import type { SanityImageSource } from "@sanity/image-url/lib/types/types";
import { client } from "./client";
import imageUrlBuilder from "@sanity/image-url";
import { type SanityDocument } from "next-sanity";

const PROFILE_QUERY = `*[_type == "profile"] | order(_createdAt desc) [0]`;
const options = { next: { revalidate: 30 } };

const { projectId, dataset } = client.config();
const urlFor = (source: SanityImageSource) =>
  projectId && dataset
    ? imageUrlBuilder({ projectId, dataset }).image(source)
    : null;

export async function generateMetadata(): Promise<Metadata> {
  const data = await client.fetch<SanityDocument>(PROFILE_QUERY, {}, options);

  if (!data) {
    return {
      title: "Okechuqu's Portfolio",
      description: "Generated by Okechuqu's portfolio",
      icons: null, // No favicon if data is unavailable
      // Default Twitter Card metadata
      twitter: {
        card: "summary", // Using "summary" since favicon is small
        title: "Okechuqu's Portfolio",
        description: "Generated by Okechuqu's portfolio",
      },
      openGraph: {
        title: "Okechuqu's Portfolio",
        description: "Generated by Okechuqu's portfolio",
        url: "https://web-url.com/", // Replace with your actual site URL
        type: "website",
      },
    };
  }

  const title = data.meta_title || "Okechuqu's Portfolio";
  const description =
    data.meta_description || "Generated by Okechuqu's portfolio";
  const faviconUrl = data.meta_favicon
    ? urlFor(data.meta_favicon)?.url()
    : null;
  const site = data.meta_x_handle || "@YourTwitterHandle"; // Replace with your X handle
  const url = data.meta_site_url || "https://dossier-oec.vercel.app/"; // Replace with your actual site URL

  return {
    title,
    description,
    icons: faviconUrl ? { icon: [faviconUrl] } : undefined,

    // Twitter Card metadata using favicon
    twitter: {
      card: "summary", // "summary_large_image" needs a larger image
      title,
      description,
      ...(faviconUrl && { images: [faviconUrl] }), // Use favicon as the image
      site,
    },
    // Open Graph metadata using favicon
    openGraph: {
      title,
      description,
      url,
      type: "website",
      ...(faviconUrl && { images: [{ url: faviconUrl }] }), // Use favicon as the image
    },
  };
}

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  );
}
